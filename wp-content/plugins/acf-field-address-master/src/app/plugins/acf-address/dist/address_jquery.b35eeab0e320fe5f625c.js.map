{"version":3,"sources":["webpack:///address_jquery.b35eeab0e320fe5f625c.js","webpack:///webpack/bootstrap b35eeab0e320fe5f625c","webpack:///./src/app/plugins/acf-address/js/address.jquery.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","$","widgetCount","makeLayout","options","$el","defaults","layout","label","rowClass","sortableElement","settings","extend","gridInfo","$inputElement","prop","fieldKey","JSON","stringify","$detachedEls","setGridPositions","positions","find","each","rowIndex","row","r","col","item","$item","data","position","attr","makeSortable","stop","sortable","disableSelection","setSortableLabel","e","target","value","index","element","text","toggleSortable","targetData","$lastUl","last","checked","hasOwnProperty","append","detach","buildLayout","items","$ul","addClass","connectWith","obj","onBlur","onCheck","makeOptions","onBlurWithAfter","afterOnEvent","onCheckWithAfter","self","type","val","street1","defaultValue","enabled","cssClass","separator","street2","street3","city","state","zip","country","$element","makeInput","$input","on","init","$table","$head","$tr","$tdEnabled","$tdLabel","$tdDefault","$tdCssClass","$tdSeparator","fn","acfAddressWidget","$this","this","$optionsContainer","$layoutContainer","window","acfAddressWidgetData","address_layout","address_options","lc","jQuery"],"mappings":"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","file":"address_jquery.b35eeab0e320fe5f625c.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t(function ($) {\n\t\n\t  //let defaults = require('./defaults.service')\n\t\n\t  //defaults(window.jQuery)\n\t\n\t  var widgetCount = 0;\n\t\n\t  // factory function for creating widget closures\n\t  var makeLayout = function makeLayout(options, $el) {\n\t\n\t    // keeping track of multiple widgets\n\t    widgetCount = widgetCount + 1;\n\t\n\t    // Widget Defaults\n\t    var defaults = {\n\t      layout: [[{ id: 'street1', label: 'Street 1' }], [{ id: 'street2', label: 'Street 2' }], [{ id: 'street3', label: 'Street 3' }], [{ id: 'city', label: 'City' }, { id: 'state', label: 'State' }, { id: 'zip', label: 'Postal Code' }, { id: 'country', label: 'Country' }], []],\n\t      rowClass: 'acf-address-' + widgetCount + '-row',\n\t      sortableElement: 'li'\n\t    };\n\t\n\t    // merge defaults and passed arguments\n\t    var settings = $.extend(defaults, options);\n\t\n\t    var gridInfo = {\n\t      $el: $el,\n\t      layout: settings.layout,\n\t      rowClass: settings.rowClass,\n\t      sortableElement: settings.sortableElement,\n\t      $inputElement: $('<input type=\"hidden\">').prop('name', 'acfAddressWidget[' + settings.fieldKey + '][address_layout]').prop('value', JSON.stringify(settings.layout)),\n\t      $detachedEls: {}\n\t    };\n\t\n\t    var setGridPositions = function setGridPositions() {\n\t\n\t      var positions = [];\n\t\n\t      gridInfo.$el.find('.' + gridInfo.rowClass).each(function (rowIndex, row) {\n\t\n\t        var r = [];\n\t\n\t        $(row).find(gridInfo.sortableElement).each(function (col, item) {\n\t\n\t          var $item = $(item);\n\t\n\t          r[col] = {\n\t            id: $item.data().id,\n\t            label: $item.data().label\n\t          };\n\t\n\t          // create a position object that holds the row and column values\n\t          var position = {\n\t            col: col,\n\t            row: rowIndex\n\t          };\n\t\n\t          // set the data properties col and row to the corresponding values\n\t          $item.data(position);\n\t        });\n\t\n\t        positions[rowIndex] = r;\n\t      });\n\t\n\t      gridInfo.$inputElement.attr('value', JSON.stringify(positions));\n\t    };\n\t\n\t    var makeSortable = function makeSortable($el, options) {\n\t\n\t      var settings = $.extend({\n\t        stop: function stop() {\n\t          // takes parameters event, ui\n\t          setGridPositions();\n\t        }\n\t      }, options);\n\t\n\t      return $el.sortable(settings).disableSelection();\n\t    };\n\t\n\t    var setSortableLabel = function setSortableLabel(e) {\n\t      var id = e.data.id,\n\t          label = e.target.value;\n\t\n\t      if ($(e.target).data('col') === 'label') {\n\t        gridInfo.$el.find('li').each(function (index, element) {\n\t          $el = $(element);\n\t          if ($el.data().id === id) {\n\t            $el.data('label', label).text(label);\n\t          }\n\t        });\n\t      }\n\t    };\n\t\n\t    var toggleSortable = function toggleSortable(e) {\n\t\n\t      var id = e.data.id,\n\t          targetData = $(e.target).data(),\n\t          $lastUl = gridInfo.$el.find('.' + gridInfo.rowClass).last();\n\t\n\t      if (e.target.checked) {\n\t\n\t        // check to see if its in the $detachedEls object\n\t        if (gridInfo.$detachedEls.hasOwnProperty(id)) {\n\t          // used the saved one\n\t          $lastUl.append(gridInfo.$detachedEls[id]);\n\t        } else {\n\t          // create the element from scratch\n\t          $lastUl.append($('<li></li>').data({\n\t            id: targetData.id,\n\t            label: targetData.label\n\t          }).text(targetData.label));\n\t        }\n\t      } else {\n\t\n\t        gridInfo.$el.find('li').each(function (index, element) {\n\t          $el = $(element);\n\t          if ($el.data().id === id) {\n\t            gridInfo.$detachedEls[id] = $el;\n\t            $el.detach();\n\t          }\n\t        });\n\t      }\n\t\n\t      // update the layout input with changes\n\t      setGridPositions();\n\t    };\n\t\n\t    var buildLayout = function buildLayout() {\n\t\n\t      gridInfo.$el.append(gridInfo.$inputElement);\n\t\n\t      $(gridInfo.layout).each(function (row, items) {\n\t        var $ul = $('<ul></ul>').addClass(gridInfo.rowClass);\n\t        gridInfo.$el.append($ul);\n\t\n\t        makeSortable($ul, { connectWith: '.' + gridInfo.rowClass });\n\t\n\t        $(items).each(function (col, obj) {\n\t          $ul.append($('<li></li>').data(obj).text(obj.label).attr('id', obj.id + '-li-movable-' + widgetCount));\n\t        });\n\t      });\n\t    };\n\t\n\t    buildLayout();\n\t\n\t    // we need to return some functions\n\t    return {\n\t      onBlur: setSortableLabel,\n\t      onCheck: toggleSortable\n\t    };\n\t  };\n\t\n\t  var makeOptions = function makeOptions(options, $el) {\n\t\n\t    // Widget Defaults\n\t    var defaults = {\n\t      options: {\n\t        street1: {\n\t          id: 'street1',\n\t          label: 'Street 1',\n\t          defaultValue: '',\n\t          enabled: true,\n\t          cssClass: 'street1',\n\t          separator: ''\n\t        },\n\t        street2: {\n\t          id: 'street2',\n\t          label: 'Street 2',\n\t          defaultValue: '',\n\t          enabled: true,\n\t          cssClass: 'street2',\n\t          separator: ''\n\t        },\n\t        street3: {\n\t          id: 'street3',\n\t          label: 'Street 3',\n\t          defaultValue: '',\n\t          enabled: true,\n\t          cssClass: 'street3',\n\t          separator: ''\n\t        },\n\t        city: { id: 'city', label: 'City', defaultValue: '', enabled: true, cssClass: 'city', separator: ',' },\n\t        state: { id: 'state', label: 'State', defaultValue: '', enabled: true, cssClass: 'state', separator: '' },\n\t        zip: { id: 'zip', label: 'Postal Code', defaultValue: '', enabled: true, cssClass: 'zip', separator: '' },\n\t        country: {\n\t          id: 'country',\n\t          label: 'Country',\n\t          defaultValue: '',\n\t          enabled: true,\n\t          cssClass: 'country',\n\t          separator: ''\n\t        }\n\t      }\n\t    };\n\t\n\t    // merge defaults and passed arguments\n\t    var settings = $.extend(defaults, options);\n\t\n\t    // Add some functionality to the event methods\n\t    function onBlurWithAfter(e) {\n\t      settings.onBlur(e);\n\t      afterOnEvent(e);\n\t    }\n\t\n\t    function onCheckWithAfter(e) {\n\t      settings.onCheck(e);\n\t      afterOnEvent(e);\n\t    }\n\t\n\t    // closure scope so its absolutely clear\n\t    var self = {\n\t      $element: $el,\n\t      $inputElement: $('<input type=\"hidden\">').data('val', settings.options).prop('value', JSON.stringify(settings.options)).prop('name', 'acfAddressWidget[' + settings.fieldKey + '][address_options]'),\n\t      options: settings.options,\n\t      onBlur: onBlurWithAfter,\n\t      onCheck: onCheckWithAfter\n\t    };\n\t\n\t    function afterOnEvent(e) {\n\t\n\t      var data = self.$inputElement.data();\n\t\n\t      var col = $(e.target).data('col');\n\t\n\t      if (e.type === 'change') {\n\t        data.val[e.data.id][col] = e.target.checked;\n\t      } else {\n\t        data.val[e.data.id][col] = e.target.value;\n\t      }\n\t\n\t      self.$inputElement.data(data);\n\t\n\t      self.$inputElement.prop('value', JSON.stringify(data.val));\n\t    }\n\t\n\t    var makeInput = function makeInput(type, value, data) {\n\t      var $input = $('<input type=\"hidden\">').val(value).data(data);\n\t\n\t      if (type === 'checkbox') {\n\t        $input.prop('type', 'checkbox').prop('checked', value).on('change', data, self.onCheck);\n\t      }\n\t      if (type === 'text') {\n\t        $input.prop('type', 'text').on('blur', data, self.onBlur);\n\t      }\n\t\n\t      return $input;\n\t    };\n\t\n\t    var init = function init() {\n\t\n\t      self.$element.append(self.$inputElement);\n\t\n\t      var $table = $('<table></table>');\n\t      var $head = $('<tr></tr>').append($('<th>Enabled</th>')).append($('<th>Label</th>')).append($('<th>Default Value</th>')).append($('<th>Css Class</th>')).append($('<th>Separator</th>'));\n\t\n\t      $table.append($head);\n\t\n\t      $.each(self.options, function (row, obj) {\n\t\n\t        var $tr = $('<tr></tr>');\n\t\n\t        var $tdEnabled = $('<td></td>').append(makeInput('checkbox', obj.enabled, obj).data('col', 'enabled').attr('id', obj.id + '-' + widgetCount));\n\t        var $tdLabel = $('<td></td>').append(makeInput('text', obj.label, obj).data('col', 'label'));\n\t        var $tdDefault = $('<td></td>').append(makeInput('text', obj.defaultValue, obj).data('col', 'defaultValue'));\n\t        var $tdCssClass = $('<td></td>').append(makeInput('text', obj.cssClass, obj).data('col', 'cssClass'));\n\t        var $tdSeparator = $('<td></td>').append(makeInput('text', obj.separator, obj).data('col', 'separator'));\n\t\n\t        $tr.append($tdEnabled).append($tdLabel).append($tdDefault).append($tdCssClass).append($tdSeparator);\n\t\n\t        $table.append($tr);\n\t      });\n\t\n\t      self.$element.append($table);\n\t    };\n\t\n\t    init();\n\t\n\t    // in this case we will just return the jQuery object\n\t    return self.$element;\n\t  };\n\t\n\t  $.fn.acfAddressWidget = function (options) {\n\t\n\t    var $this = $(this);\n\t\n\t    var settings = $.extend({}, options);\n\t\n\t    // Call our instance closure\n\t    // to handle multiple elements\n\t    $this.each(function (index, element) {\n\t\n\t      var $element = $(element);\n\t\n\t      if ($element.data('acfAddressWidgetized') === true) {\n\t        return;\n\t      }\n\t\n\t      $element.data('acfAddressWidgetized', true);\n\t\n\t      var $optionsContainer = $('<div></div>').attr('id', 'options-container');\n\t      var $layoutContainer = $('<div></div>').attr('id', 'layout-container');\n\t\n\t      $element.append($optionsContainer).append($layoutContainer);\n\t\n\t      settings.fieldKey = $element.data('field');\n\t\n\t      settings.layout = window.acfAddressWidgetData.address_layout;\n\t\n\t      settings.options = window.acfAddressWidgetData.address_options;\n\t\n\t      var lc = makeLayout(settings, $layoutContainer);\n\t\n\t      settings.onBlur = lc.onBlur;\n\t      settings.onCheck = lc.onCheck;\n\t      makeOptions(settings, $optionsContainer);\n\t    });\n\t\n\t    return $this;\n\t  };\n\t})(jQuery);\n\n/***/ }\n/******/ ]);\n\n\n/** WEBPACK FOOTER **\n ** address_jquery.b35eeab0e320fe5f625c.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap b35eeab0e320fe5f625c\n **/","(function ($) {\n\n  //let defaults = require('./defaults.service')\n\n  //defaults(window.jQuery)\n\n  let widgetCount = 0\n\n  // factory function for creating widget closures\n  let makeLayout = function (options, $el) {\n\n    // keeping track of multiple widgets\n    widgetCount = widgetCount + 1\n\n    // Widget Defaults\n    let defaults = {\n      layout: [\n        [ { id: 'street1', label: 'Street 1' } ],\n        [ { id: 'street2', label: 'Street 2' } ],\n        [ { id: 'street3', label: 'Street 3' } ],\n        [\n          { id: 'city', label: 'City' },\n          { id: 'state', label: 'State' },\n          { id: 'zip', label: 'Postal Code' },\n          { id: 'country', label: 'Country' }\n        ],\n        []\n      ],\n      rowClass: 'acf-address-' + widgetCount + '-row',\n      sortableElement: 'li'\n    }\n\n    // merge defaults and passed arguments\n    let settings = $.extend(defaults, options)\n\n    let gridInfo = {\n      $el: $el,\n      layout: settings.layout,\n      rowClass: settings.rowClass,\n      sortableElement: settings.sortableElement,\n      $inputElement: $('<input type=\"hidden\">')\n        .prop('name', 'acfAddressWidget[' + settings.fieldKey + '][address_layout]')\n        .prop('value', JSON.stringify(settings.layout)),\n      $detachedEls: {}\n    }\n\n    let setGridPositions = function () {\n\n      let positions = []\n\n      gridInfo.$el.find('.' + gridInfo.rowClass).each(function (rowIndex, row) {\n\n        let r = []\n\n        $(row).find(gridInfo.sortableElement).each(function (col, item) {\n\n          let $item = $(item)\n\n          r[col] = {\n            id: $item.data().id,\n            label: $item.data().label\n          }\n\n          // create a position object that holds the row and column values\n          let position = {\n            col: col,\n            row: rowIndex\n          }\n\n          // set the data properties col and row to the corresponding values\n          $item.data(position)\n\n        })\n\n        positions[rowIndex] = r\n\n      })\n\n      gridInfo.$inputElement.attr('value', JSON.stringify(positions))\n\n    }\n\n    let makeSortable = function ($el, options) {\n\n      let settings = $.extend({\n        stop: function () { // takes parameters event, ui\n          setGridPositions()\n        }\n      }, options)\n\n      return $el.sortable(settings).disableSelection()\n\n    }\n\n\n    let setSortableLabel = function (e) {\n      let id = e.data.id,\n        label = e.target.value\n\n      if ($(e.target).data('col') === 'label') {\n        gridInfo.$el.find('li').each(function (index, element) {\n          $el = $(element)\n          if ($el.data().id === id) {\n            $el.data('label', label)\n              .text(label)\n          }\n        })\n      }\n    }\n\n\n    let toggleSortable = function (e) {\n\n      let id = e.data.id,\n        targetData = $(e.target).data(),\n        $lastUl = gridInfo.$el.find('.' + gridInfo.rowClass).last()\n\n      if (e.target.checked) {\n\n        // check to see if its in the $detachedEls object\n        if (gridInfo.$detachedEls.hasOwnProperty(id)) {\n          // used the saved one\n          $lastUl.append(gridInfo.$detachedEls[id])\n        } else {\n          // create the element from scratch\n          $lastUl.append($('<li></li>')\n            .data({\n              id: targetData.id,\n              label: targetData.label\n            })\n            .text(targetData.label))\n        }\n\n      } else {\n\n        gridInfo.$el.find('li').each(function (index, element) {\n          $el = $(element)\n          if ($el.data().id === id) {\n            gridInfo.$detachedEls[id] = $el\n            $el.detach()\n          }\n        })\n\n      }\n\n      // update the layout input with changes\n      setGridPositions()\n\n    }\n\n    let buildLayout = function () {\n\n      gridInfo.$el.append(gridInfo.$inputElement)\n\n      $(gridInfo.layout).each(function (row, items) {\n        let $ul = $('<ul></ul>')\n          .addClass(gridInfo.rowClass)\n        gridInfo.$el.append($ul)\n\n        makeSortable($ul, { connectWith: '.' + gridInfo.rowClass })\n\n        $(items).each(function (col, obj) {\n          $ul.append($('<li></li>')\n            .data(obj)\n            .text(obj.label)\n            .attr('id', `${obj.id}-li-movable-${widgetCount}`))\n        })\n\n      })\n\n    }\n\n    buildLayout()\n\n    // we need to return some functions\n    return {\n      onBlur: setSortableLabel,\n      onCheck: toggleSortable\n    }\n\n  }\n\n  let makeOptions = function (options, $el) {\n\n    // Widget Defaults\n    let defaults = {\n      options: {\n        street1: {\n          id: 'street1',\n          label: 'Street 1',\n          defaultValue: '',\n          enabled: true,\n          cssClass: 'street1',\n          separator: ''\n        },\n        street2: {\n          id: 'street2',\n          label: 'Street 2',\n          defaultValue: '',\n          enabled: true,\n          cssClass: 'street2',\n          separator: ''\n        },\n        street3: {\n          id: 'street3',\n          label: 'Street 3',\n          defaultValue: '',\n          enabled: true,\n          cssClass: 'street3',\n          separator: ''\n        },\n        city: { id: 'city', label: 'City', defaultValue: '', enabled: true, cssClass: 'city', separator: ',' },\n        state: { id: 'state', label: 'State', defaultValue: '', enabled: true, cssClass: 'state', separator: '' },\n        zip: { id: 'zip', label: 'Postal Code', defaultValue: '', enabled: true, cssClass: 'zip', separator: '' },\n        country: {\n          id: 'country',\n          label: 'Country',\n          defaultValue: '',\n          enabled: true,\n          cssClass: 'country',\n          separator: ''\n        }\n      }\n    }\n\n    // merge defaults and passed arguments\n    let settings = $.extend(defaults, options)\n\n    // Add some functionality to the event methods\n    function onBlurWithAfter(e) {\n      settings.onBlur(e)\n      afterOnEvent(e)\n    }\n\n    function onCheckWithAfter(e) {\n      settings.onCheck(e)\n      afterOnEvent(e)\n    }\n\n    // closure scope so its absolutely clear\n    let self = {\n      $element: $el,\n      $inputElement: $('<input type=\"hidden\">')\n        .data('val', settings.options)\n        .prop('value', JSON.stringify(settings.options))\n        .prop('name', 'acfAddressWidget[' + settings.fieldKey + '][address_options]'),\n      options: settings.options,\n      onBlur: onBlurWithAfter,\n      onCheck: onCheckWithAfter\n    }\n\n    function afterOnEvent(e) {\n\n      let data = self.$inputElement.data()\n\n      let col = $(e.target).data('col')\n\n      if (e.type === 'change') {\n        data.val[e.data.id][col] = e.target.checked\n      } else {\n        data.val[e.data.id][col] = e.target.value\n      }\n\n      self.$inputElement.data(data)\n\n      self.$inputElement.prop('value', JSON.stringify(data.val))\n    }\n\n    let makeInput = function (type, value, data) {\n      let $input = $('<input type=\"hidden\">')\n        .val(value)\n        .data(data)\n\n      if (type === 'checkbox') {\n        $input.prop('type', 'checkbox')\n          .prop('checked', value)\n          .on('change', data, self.onCheck)\n      }\n      if (type === 'text') {\n        $input.prop('type', 'text')\n          .on('blur', data, self.onBlur)\n      }\n\n      return $input\n    }\n\n    let init = function () {\n\n      self.$element.append(self.$inputElement)\n\n      let $table = $('<table></table>')\n      let $head = $('<tr></tr>')\n        .append($('<th>Enabled</th>'))\n        .append($('<th>Label</th>'))\n        .append($('<th>Default Value</th>'))\n        .append($('<th>Css Class</th>'))\n        .append($('<th>Separator</th>'))\n\n      $table.append($head)\n\n      $.each(self.options, function (row, obj) {\n\n        let $tr = $('<tr></tr>')\n\n        let $tdEnabled = $('<td></td>').append(makeInput('checkbox', obj.enabled, obj).data('col', 'enabled').attr('id', `${obj.id}-${widgetCount}`))\n        let $tdLabel = $('<td></td>').append(makeInput('text', obj.label, obj).data('col', 'label'))\n        let $tdDefault = $('<td></td>').append(makeInput('text', obj.defaultValue, obj).data('col', 'defaultValue'))\n        let $tdCssClass = $('<td></td>').append(makeInput('text', obj.cssClass, obj).data('col', 'cssClass'))\n        let $tdSeparator = $('<td></td>').append(makeInput('text', obj.separator, obj).data('col', 'separator'))\n\n        $tr.append($tdEnabled)\n          .append($tdLabel)\n          .append($tdDefault)\n          .append($tdCssClass)\n          .append($tdSeparator)\n\n        $table.append($tr)\n      })\n\n      self.$element.append($table)\n\n    }\n\n    init()\n\n    // in this case we will just return the jQuery object\n    return self.$element\n\n  }\n\n  $.fn.acfAddressWidget = function (options) {\n\n    let $this = $(this)\n\n    let settings = $.extend({}, options)\n\n    // Call our instance closure\n    // to handle multiple elements\n    $this.each(function (index, element) {\n\n      let $element = $(element)\n\n      if ($element.data('acfAddressWidgetized') === true) {\n        return\n      }\n\n      $element.data('acfAddressWidgetized', true)\n\n      let $optionsContainer = $('<div></div>').attr('id', 'options-container')\n      let $layoutContainer = $('<div></div>').attr('id', 'layout-container')\n\n      $element.append($optionsContainer)\n        .append($layoutContainer)\n\n      settings.fieldKey = $element.data('field')\n\n      settings.layout = window.acfAddressWidgetData.address_layout\n\n      settings.options = window.acfAddressWidgetData.address_options\n\n\n      let lc = makeLayout(settings, $layoutContainer)\n\n      settings.onBlur = lc.onBlur\n      settings.onCheck = lc.onCheck\n      makeOptions(settings, $optionsContainer)\n    })\n\n    return $this\n\n  }\n\n})(jQuery)\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/app/plugins/acf-address/js/address.jquery.js\n **/"],"sourceRoot":""}